(function(){
  var ref$, ParamTrie, ParamBranch, Param, Branch, Map, σ, urlToPath, toParamBranch, optionToStream, compile, route;
  ref$ = require('param-trie'), ParamTrie = ref$.ParamTrie, ParamBranch = ref$.ParamBranch, Param = ParamBranch.Param, Branch = ParamBranch.Branch;
  Map = require('immutable').Map;
  σ = require('highland');
  urlToPath = function(it){
    return it.split('/').filter(function(it){
      return it.length > 0;
    });
  };
  toParamBranch = function(it){
    return urlToPath(it).map(function(it){
      if (it[0] === ':') {
        return Param(it.slice(1));
      } else {
        return Branch(it);
      }
    });
  };
  optionToStream = function(it){
    return it.cata({
      None: function(){
        return σ([]);
      },
      Some: function(it){
        return σ([it]);
      }
    });
  };
  compile = function(m){
    return ParamTrie.fromMap(Map(m).mapKeys(toParamBranch));
  };
  module.exports = route = function(map){
    var trie;
    trie = compile(map);
    return function(req){
      return optionToStream(trie.lookupOne(urlToPath(req.url))).flatMap(function(a){
        var value, params;
        value = a.value, params = a.params;
        return value((req.params = params.toJS(), req));
      });
    };
  };
}).call(this);
